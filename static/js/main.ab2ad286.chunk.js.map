{"version":3,"sources":["components/Ranking.js","actions/Ranking.js","containers/Ranking.js","components/Nav.js","containers/Nav.js","App.js","reducers/shopping.js","reducers/Ranking.js","reducers/index.js","serviceWorker.js","index.js","configureStore.js"],"names":["Ranking","this","props","onMount","categoryId","nextProps","onUpdate","category","ranking","error","name","map","item","i","Card","key","code","style","maxWidth","margin","CardMedia","component","image","imageUrl","alt","title","CardContent","Typography","variant","CardActions","Button","color","fullWidth","href","url","React","Component","defaultProps","startRequest","type","payload","receiveData","response","finishRequest","fetchRanking","dispatch","getState","a","categories","shopping","find","id","replace","queryString","qs","stringify","appid","category_id","fetchJsonp","json","data","connect","state","ownProps","actions","useStyles","makeStyles","createStyles","drawer","width","flexShrink","drawerPaper","onClick","path","push","classes","Drawer","anchor","paper","List","ListItem","button","to","ListItemText","primary","App","className","paddingLeft","CssBaseline","AppBar","left","Toolbar","marginTop","padding","render","match","params","initialState","getRanking","itemLength","ResultSet","totalResultsReturned","index","Result","Code","Name","Url","Image","Medium","undefined","action","noop","Boolean","window","location","hostname","history","createBrowserHistory","store","createStore","combineReducers","reducers","router","connectRouter","applyMiddleware","logger","thunk","routerMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.ab2ad286.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nexport default class Ranking extends React.Component {\r\n  componentWillMount() {\r\n    this.props.onMount(this.props.categoryId);\r\n  }\r\n\r\n  componentWillUpdate(nextProps) {\r\n    if (this.props.categoryId !== nextProps.categoryId) {\r\n      this.props.onUpdate(nextProps.categoryId);\r\n    }\r\n  }\r\n  render() {\r\n    const { category, ranking, error } = this.props;\r\n    return (\r\n      <div>\r\n        <h2>\r\n          {typeof category !== \"undefined\"\r\n            ? `${category.name}のランキング`\r\n            : \"\"}\r\n        </h2>\r\n        {(() => {\r\n          if (error) {\r\n            return <p>エラーが発生しました。リロードしてください。</p>;\r\n          } else if (typeof ranking === \"undefined\") {\r\n            return <p>読み込み中...</p>;\r\n          } else {\r\n            return ranking.map((item, i) => (\r\n              <Card\r\n                key={`ranking-item-${item.code}`}\r\n                style={{ maxWidth: \"500px\", margin: \"32px auto\" }}\r\n              >\r\n                <CardMedia\r\n                  component=\"img\"\r\n                  image={item.imageUrl}\r\n                  alt={item.name}\r\n                  title={`${i + 1}位 ${item.name}`}\r\n                />\r\n                <CardContent>\r\n                  <Typography variant=\"subtitle1\">{`${i + 1}位 ${\r\n                    item.name\r\n                  }`}</Typography>\r\n                </CardContent>\r\n                <CardActions>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    fullWidth\r\n                    href={item.url}\r\n                  >\r\n                    商品ページへ\r\n                  </Button>\r\n                </CardActions>\r\n              </Card>\r\n            ));\r\n          }\r\n        })()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nRanking.propTypes = {\r\n  categoryId: PropTypes.string,\r\n  onMount: PropTypes.func.isRequired,\r\n  onUpdate: PropTypes.func.isRequired,\r\n  category: PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n  }),\r\n  ranking: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      code: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      url: PropTypes.string.isRequired,\r\n      imageUrl: PropTypes.string.isRequired,\r\n    })\r\n  ),\r\n  error: PropTypes.bool.isRequired,\r\n};\r\n\r\nRanking.defaultProps = {\r\n  categoryId: \"1\",\r\n};\r\n","import fetchJsonp from \"fetch-jsonp\";\r\nimport qs from \"qs\";\r\nimport { replace } from \"react-router-redux\";\r\n\r\nconst API_URL =\r\n  \"https://shopping.yahooapis.jp/ShoppingWebService/V1/json/categoryRanking\";\r\nconst APP_ID = \"dj00aiZpPVpqTzREQ1Jua1FuSyZzPWNvbnN1bWVyc2VjcmV0Jng9ZTY-\";\r\n\r\nconst startRequest = (category) => ({\r\n  type: \"START_REQUEST\",\r\n  payload: { category },\r\n});\r\n\r\nconst receiveData = (category, error, response) => ({\r\n  type: \"RECEIVE_DATA\",\r\n  payload: { category, error, response },\r\n});\r\n\r\nconst finishRequest = (category) => ({\r\n  type: \"FINISH_REQUEST\",\r\n  payload: { category },\r\n});\r\n\r\nexport const fetchRanking = (categoryId) => {\r\n  return async (dispatch, getState) => {\r\n    const categories = getState().shopping.categories;\r\n    const category = categories.find((category) => category.id === categoryId);\r\n    if (typeof category === \"undefined\") {\r\n      dispatch(replace(\"/\"));\r\n      return;\r\n    }\r\n\r\n    dispatch(startRequest(category));\r\n\r\n    const queryString = qs.stringify({\r\n      appid: APP_ID,\r\n      category_id: categoryId,\r\n    });\r\n\r\n    try {\r\n      const response = await fetchJsonp(`${API_URL}?${queryString}`);\r\n      const data = await response.json();\r\n      dispatch(receiveData(categoryId, null, data));\r\n    } catch (error) {\r\n      dispatch(receiveData(categoryId, error));\r\n    }\r\n    dispatch(finishRequest(category));\r\n  };\r\n};\r\n","import { connect } from \"react-redux\";\r\nimport Ranking from \"../components/Ranking\";\r\nimport * as actions from \"../actions/Ranking\";\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n  category_id: ownProps.categoryId,\r\n  category: state.Ranking.category,\r\n  ranking: state.Ranking.ranking,\r\n  error: state.Ranking.error,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onMount(categoryId) {\r\n    dispatch(actions.fetchRanking(categoryId));\r\n  },\r\n  onUpdate(categoryId) {\r\n    dispatch(actions.fetchRanking(categoryId));\r\n  },\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Ranking);\r\n","import Drawer from \"@material-ui/core/Drawer\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\r\nimport PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles(() =>\r\n  createStyles({\r\n    drawer: {\r\n      width: drawerWidth,\r\n      flexShrink: 0,\r\n    },\r\n    drawerPaper: {\r\n      width: drawerWidth,\r\n    },\r\n  })\r\n);\r\n\r\nexport default function Nav({ categories, onClick }) {\r\n  const classes = useStyles();\r\n  const to = (category) =>\r\n    category.id === \"1\" ? \"/all\" : `/category/${category.id}`;\r\n  return (\r\n    <Drawer\r\n      variant=\"permanent\"\r\n      anchor=\"left\"\r\n      classes={{\r\n        paper: classes.drawerPaper,\r\n      }}\r\n    >\r\n      <List>\r\n        {categories.map((category) => (\r\n          <ListItem\r\n            button\r\n            key={`nav-item-${category.id}`}\r\n            onClick={() => onClick(to(category))}\r\n          >\r\n            <ListItemText primary={category.name} />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n    </Drawer>\r\n  );\r\n}\r\n\r\nNav.propTypes = {\r\n  categories: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n    })\r\n  ).isRequired,\r\n  onClick: PropTypes.func.isRequired,\r\n};\r\n","import { connect } from \"react-redux\";\r\nimport { push } from \"react-router-redux\";\r\nimport Nav from \"../components/Nav\";\r\n\r\nconst mapStateToProps = (state) => ({\r\n  categories: state.shopping.categories,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onClick(path) {\r\n    dispatch(push(path));\r\n  },\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Nav);\r\n","import React, { Component } from \"react\";\nimport { Redirect, Route, Switch } from \"react-router-dom\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Ranking from \"./containers/Ranking\";\nimport Nav from \"./containers/Nav\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div className=\"App\" style={{ paddingLeft: 240 }}>\n        <CssBaseline />\n\n        <AppBar style={{ left: 240 }}>\n          <Toolbar>\n            <Typography variant=\"h6\" color=\"inherit\">\n              Yahoo!ショッピングランキング\n            </Typography>\n          </Toolbar>\n        </AppBar>\n\n        <Nav />\n\n        <div style={{ marginTop: 64, padding: 32 }}>\n          <Switch>\n            <Route path=\"/all\" component={Ranking} />\n            <Route path=\"/category/1\" render={() => <Redirect to=\"/all\" />} />\n            <Route\n              path=\"/category/:id\"\n              render={({ match }) => <Ranking categoryId={match.params.id} />}\n            />\n          </Switch>\n        </div>\n      </div>\n    );\n  }\n}\n","const initialState = {\r\n  categories: [\r\n    {\r\n      id: \"1\",\r\n      name: \"すべてのカテゴリ\",\r\n    },\r\n    {\r\n      id: \"2502\",\r\n      name: \"パソコン、周辺機器\",\r\n    },\r\n    {\r\n      id: \"10002\",\r\n      name: \"本、雑誌、コミック\",\r\n    },\r\n  ],\r\n};\r\n\r\nexport default () => initialState;\r\n","const getRanking = (response) => {\r\n  const ranking = [];\r\n  const itemLength = response.ResultSet.totalResultsReturned;\r\n  for (let index = 0; index < itemLength; index++) {\r\n    const item = response.ResultSet[\"0\"].Result[index + \"\"];\r\n    ranking.push({\r\n      code: item.Code,\r\n      name: item.Name,\r\n      url: item.Url,\r\n      imageUrl: item.Image.Medium,\r\n    });\r\n  }\r\n  return ranking;\r\n};\r\n\r\nconst initialState = {\r\n  category: undefined,\r\n  ranking: undefined,\r\n  error: false,\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"START_REQUEST\":\r\n      return {\r\n        category: action.payload.category,\r\n        ranking: undefined,\r\n        error: false,\r\n      };\r\n\r\n    case \"RECEIVE_DATA\":\r\n      return action.payload.error\r\n        ? { ...state, error: true }\r\n        : { ...state, ranking: getRanking(action.payload.response) };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","export const noop = (state = {}) => state;\r\nexport { default as shopping } from \"./shopping\";\r\nexport { default as Ranking } from \"./Ranking\";\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ConnectedRouter } from \"connected-react-router\";\nimport { createBrowserHistory } from \"history\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport App from \"./App\";\nimport configureStore from \"./configureStore\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst history = createBrowserHistory();\n\nconst store = configureStore(history);\n\n// const store = createStore(combineReducers(reducers), applyMiddleware(logger));\n\nReactDOM.render(\n  <Provider store={store}>\n    <ConnectedRouter history={history}>\n      <App />\n    </ConnectedRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport logger from \"redux-logger\";\r\n// import { routerReducer, routerMiddleware } from \"react-router-redux\";\r\nimport { connectRouter, routerMiddleware } from \"connected-react-router\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nimport * as reducers from \"./reducers\";\r\n\r\nexport default function configureStore(history) {\r\n  return createStore(\r\n    combineReducers({ ...reducers, router: connectRouter(history) }),\r\n    applyMiddleware(logger, thunk, routerMiddleware(history))\r\n  );\r\n}\r\n"],"sourceRoot":""}